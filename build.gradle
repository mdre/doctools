// https://devsoap.com/using-webcomponents-in-vaadin-with-gradle/
// para crear el componente:
// gradle vaadinCreateComponent --name SubWindowDesktop --package com.awesomecontrols.subwindow --tag div
//
// los recursos se deben agregar en /src/main/resources/META-INF/resources/frontend/...
// https://vaadin.com/blog/vaadin-10-and-static-resources

// DSL Gradle 7.0
plugins {
    id 'java-library'
    // https://plugins.gradle.org/plugin/net.researchgate.release
    // id 'net.researchgate.release' version '2.8.1'
    // https://plugins.gradle.org/plugin/nu.studer.credentials
    id 'nu.studer.credentials' version '2.1'
    // https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    //id 'io.codearte.nexus-staging' version '0.30.0'

    // https://github.com/gradle-nexus/publish-plugin/
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"

    id 'maven-publish'
    id 'signing'
}

def sonatypeUser = credentials.sonatypeUser
def sonatypePassword = credentials.sonatypePassword

description = rootProject.name

// ejecutar: gradle idea 
// para que inicialize el proyecto y baje los javadocs.
apply plugin: 'idea'
idea{
    module{
        downloadJavadoc=true
    }
}

// desactivo la generación de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

println "***************************************************************"
println "SISTEMA: " + name
println "VERSION: " + version
println "***************************************************************"
import java.text.SimpleDateFormat
def getCurrentTimestamp ()
{
    Date today = new Date ()
    SimpleDateFormat df = new SimpleDateFormat ("dd/MM/yyyy hh:mm:ss")
    return df.format (today)
}

println getCurrentTimestamp()
println "---------------------------------------------------------------"
// incrementar automáticamente el buildNumber
task autoBuildNumber {
    doFirst {
        println "autobuild number....."
        File propertiesFile = new File('gradle.properties')
        def lines = propertiesFile.readLines()

        PrintWriter printWriter = new PrintWriter(propertiesFile)
        String versionNumber = ""
        lines.each {String line ->
            if (line.startsWith("version") ){
                versionNumber = line.tokenize("=")[1]
                String[] versionParts = versionNumber.tokenize(".")
                // recalcular el build 
                versionNumber = versionParts[0]+\
                                '.'+versionParts[1]+\
                                '.'+versionParts[2]+
                                '.'+( versionParts.length==4 ? (versionParts[3].toInteger()+1).toString():"1")
                
                line = "version="+versionNumber
                //                println line
            }
            printWriter.println(line)
        }
        printWriter.close()

    }
}
// saltar autoBuildNumber
// agregar esta tarea para que no se incremente el valor.
task sabn{}

task createMavenPom {
    doLast {
        println"creando el POM..."
        mkdir("build/resources/main/META-INF/maven/$project.group/$project.archivesBaseName")

        pom {}.writeTo("build/resources/main/META-INF/maven/$project.group/$project.archivesBaseName/pom.xml")

        file("build/resources/main/META-INF/maven/$project.group/$project.archivesBaseName/pom.properties").text = """\
            version=$project.version
            groupId=$project.group
            artifactId=$project.archivesBaseName
            """.stripIndent()
    }
} 

// agregar la dependencia solo si no se trata de un release
if (! (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")
       || project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("sabn")) 
   ) {
    build.configure{dependsOn autoBuildNumber} 
}
// build.dependsOn createMavenPom


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://repo.e-iceblue.cn/repository/maven-public/"
    }

}

dependencies {
    
    // con este funciona el reemplazo
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-scratchpad:4.1.2'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    implementation 'org.apache.poi:poi-excelant:4.1.2'
    

    //implementation 'org.apache.poi:poi-ooxml:5.0.0'
    //implementation 'org.apache.poi:poi:5.0.0'
    //implementation 'org.apache.poi:poi-scratchpad:5.0.0'
    //implementation 'org.apache.poi:poi-ooxml-full:5.0.0'
    //implementation 'org.apache.poi:poi-excelant:5.0.0'

    implementation 'fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.core-gae:2.0.2'
    implementation 'fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.pdf-gae:2.0.2'
    
    testImplementation "junit:junit:[4,)"
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

jar {
    manifest {
        attributes(
            "Manifest-Version": "1.0",
            "Vaadin-Package-Version": "1",
            "Vaadin-Addon": artifactId+"-"+version+".jar",
            "Implementation-Vendor": "MarceloDRe",
            "Implementation-Title": "$title",
            "Implementation-Version": "$version"
      
        )
    }
}



//create a single Jar with all dependencies
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

java {
    withJavadocJar()
    withSourcesJar()
}

//======================================================================
// para publicar en Sonatype:
//  gradle publishToSonatype closeAndReleaseSonatypeStagingRepository sabn
//
// depende de: 
// id 'nu.studer.credentials' version '2.1'
// https://github.com/gradle-nexus/publish-plugin/
// id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
//======================================================================
nexusPublishing {
    repositories {
        sonatype {
            username = "$sonatypeUser"
            password = "$sonatypePassword"
        }
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = 'my-library'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Documento Tools'
                packaging = 'jar'
                // optionally artifactId can be defined here 
                description = 'Documento Tools'
                url = 'https://github.com/mdre/docxtemplater'

                // properties = [
                //     myProp: "value",
                //     "prop.with.dots": "anotherValue"
                // ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mdre'
                        name = 'Marcelo D. RE'
                        email = 'marcelo.re@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/mdre/doctools.git'
                    developerConnection = 'scm:git:ssh://github.com/mdre/doctools.git'
                    url = 'https://github.com/mdre/doctools'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
